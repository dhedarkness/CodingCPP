#include<iostream>
#include<algorithm>
using namespace std;
long a[100050];
void merge(int arr[], int l, int m, int r) 
{ 
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m; 
  
    /* create temp arrays */
    int L[n1], R[n2],M[n1],Q[n2]; 
  
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++) {
		M[i] = a[l+i];
		L[i] = arr[l + i]; 
	}	
    for (j = 0; j < n2; j++){
        R[j] = arr[m + 1+ j]; 
		Q[j]=a[m+1+j];
	}
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
			a[k]=M[i];
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
			a[k]=Q[j];
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    } 
  

    while (i < n1) 
    { 
		a[k]=M[i];
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 
  
  
    while (j < n2) 
    { 
		a[k]=Q[j];
        arr[k] = R[j]; 
        j++; 
        k++; 
    } 
} 
  
void mergeSort(int arr[], int l, int r) 
{ 
    if (l < r) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int m = l+(r-l)/2; 
  
        // Sort first and second halves 
        mergeSort(arr, l, m); 
        mergeSort(arr, m+1, r); 
  
        merge(arr, l, m, r); 
    } 
} 
int main(){
	long long n,r,avg,sum=0;
	bool flag=true;
	cin>>n>>r>>avg;/*
	first calculate the number of points to increase mathematically
	if it reaches max you can't, so go to the next one
	sort acc to bi
	*/
	int b[n];
	for(int i=0;i<n;++i){
		cin>>a[i]>>b[i];
		sum+=a[i];
	}
	long long count=0;
	long long z=(avg*n)-sum;
	double x=(double)sum/(n+0.00);
	if(z>0){
		/*
		sort nlogn acc to b[i]
		*/
		mergeSort(b,0,n-1);
	    for(int i=0;i<n;++i){
	   		if(a[i]!=r){
				if((r-a[i])>z){
					count+=z*b[i];
					break;
				}
				else{
					z-=(r-a[i]);
					count+=((b[i])*(r-a[i]));
				}
			}
			else{
				
			}
	    }
		cout<<count;
	}
	else{
		cout<<"0";
	}
	
}