#include <bits/stdc++.h>
bool visited[12][12];
using namespace std;
long dfs(bool visited[][12],vector<vector<int>> grid,int i,int j){
    long count=1;
    grid[i][j]=0;
    if(!visited[i+1][j]){
        count+=dfs(visited,grid,i+1,j);
    }
    if(!visited[i+2][j]){
        count+=dfs(visited,grid,i-1,j);
    }
    if(!visited[i][j+1]){
        count+=dfs(visited,grid,i,j+1);
    }
    if(!visited[i][j]){
        count+=dfs(visited,grid,i+1,j+1);
    }
    if(!visited[i+1][j+2]){
        count+=dfs(visited,grid,i+1,j-1);
    }
    if(!visited[i+2][j+1]){
        count+=dfs(visited,grid,i-1,j+1);
    }
    if(!visited[i+2][j+2]){
        count+=dfs(visited,grid,i-1,j-1);
    }
    if(!visited[i][j+2]){
        count+=dfs(visited,grid,i,j-1);
    }
    return count;

}

// Complete the maxRegion function below.
int maxRegion(vector<vector<int>> grid,int n,int m) {
    
    for(int i=1;i<=n+1;++i){
        for(int j=1;j<=m+1;++j){
            if(i==n+1||j==m+1){
                visited[i][j]=true;
            }
            else{
                if(grid[i-1][j-1]){
                    visited[i][j]=false;
                }
                else{
                    visited[i][j]=true;
                }
            }
        }
    }
    int max=0;
    for(int i=0;i<n;++i){
        for(int j=0;j<m;++j){
            long count;
            if(!(visited[i+1][j+1])){
                count=dfs(visited,grid,i,j);
            }
            if(count>max){
                max=count;
            }   
        }
    }
    //dfs(gris,n,1,1,visited);
    cout<<max;
    return max;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    int m;
    cin >> m;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<int>> grid(n);
    for (int i = 0; i < n; i++) {
        grid[i].resize(m);

        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int res = maxRegion(grid,n,m);

    fout << res << "\n";

    fout.close();

    return 0;
}
